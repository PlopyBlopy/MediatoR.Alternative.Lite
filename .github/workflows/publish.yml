name: Publish Package

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: "9.0.x"
  PACKAGE_NAME: "MediatoR.Alternative.Lite"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получение кода
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Установка .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Шаг 3: Восстановление зависимостей
      - name: Restore dependencies
        run: dotnet restore

      # Шаг 4: Сборка
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # Шаг 5: Тесты
      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      # Шаг 6: Извлечение версии из тега (только для релизных сборок)
      - name: Extract version from tag
        if: contains(github.ref, 'tags/v')
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV

      # Шаг 7: Создание пакета
      - name: Pack
        run: |
          dotnet pack ./src/MediatoR.Alternative.Lite/MediatoR.Alternative.Lite/${{ env.PACKAGE_NAME }}.csproj \
            --configuration Release \
            --no-build \
            --output ./artifacts \
            /p:Version=${{ env.PACKAGE_VERSION || '1.0.0' }}  # Fallback для тестовых сборок

      # Шаг 8: Публикация (только при наличии тега)
      - name: Push to GitHub Packages
        if: contains(github.ref, 'tags/v')
        run: dotnet nuget push ./artifacts/*.nupkg --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
